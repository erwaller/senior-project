-- <%=@entity%> is a state machine with <%=@inputs%> inputs, <%=@outputs%> outputs, and <%=@states.size%> states

ENTITY <%=@entity%> IS PORT(
  clock, reset:    IN BIT;
  data_in:         IN BIT_VECTOR( <%=@inputs-1%> DOWNTO 0 );
  data_out:        OUT BIT_VECTOR ( <%=@outputs-1%> DOWNTO 0 )
  );
END <%=@entity%>;

ARCHITECTURE behavioral OF <%=@entity%> IS
  TYPE state is (<%=Range.new(0,@states.size-1).map{|i| "s#{i}"}.join(',')%>);
  SIGNAL ps, ns : state;
BEGIN
  state_machine: PROCESS( clock ) BEGIN
    IF reset = '1' THEN
      ps <= s0;  -- s0 is always the initial state
    ELSIF (clock'EVENT AND clock = '1') THEN
      ps <= ns;
    END IF;
    -- "move" to current state
    CASE ps IS
    <% @states.each_with_index do |s, i| %>
        WHEN <%="s#{i}"%> =>
          data_out <= "<%=s[:output].to_bv(@outputs)%>";
          CASE data_in IS
          <% s[:transitions].each_with_index do |t, j| %>
            <% if not t.nil? %>
            WHEN "<%=j.to_bv(@inputs)%>" => ns <= <%="s#{t}"%>;
            <% end %>
          <% end %>
            WHEN OTHERS => NULL;
          END CASE;
    <% end %>
    END CASE;
  END PROCESS state_machine;
END behavioral;
